Git : is a version control system (vcs)
- open source
- super fast
- distributed
- time machine
- local and remote repos
- track changes (keeps track of code history by takes snapshots of your files)
- easily swap versions
- ideals for teams
- alows to change back to previous versions of your project
- created in 2005 by linus travolds (creator of linux) 
- unlike other version control system , Git does not save delta , it stores the full content , that why it's too fast
- old word for "staging area" is "index"

Commits specification :
	- each commit has specific ID generated by Git (unique 40 character hexa decimal string)
	- include information about : message , date& time , author  , complete snapshot of a project at the time it was created
	- stage will no be empty after each commit

Github and Gitlab : is just a place ehre developer store their projects for other developers to access
- remote repository
- only stores code
- you can work with Github over ssh or https. most of th time we're using https especially for cloning existing projects.
- you can use https in a regular way but for using ssh you must generate ssh_key. 

Popularity:
Git : 87%
Subversion : 16.1%
Team Foundation Version Control (TFS) : 10.9%
and so on ...

- visual diff tools
	- KDiff3
	- P4Merge
	- WinMerge (Windows Only)
	- VSCode

Requirements :
1- Install git
	- Linux Debian  :  $ sudo apt-get install git
	- Linux Fedora  :  $ sudo yum install git
	- Mac  :  https://git-scm.com/download/mac
	- Windows  :  http://git-scm.com/download/win ( if you don't know what is going on in installer , just click next)
2- Configure with Github
	(open setting file  :  $ git config --global -e)
	(system : all users , global : all repositories of the current user , local : the current repository)
	- Name
	- Email
	- Default Editor
	- Line ending
		- windows  :  \r\n  Carriage Return , Line Feed -> $ git config --global core.autocrlf true
		- macOS/Linux  :  \n  Line Feed -> $ git config --global core.autocrlf input
		- 
	- (optional) change default editor. it's vary based on OS.
		- $ git config --global core.editor "code --wait"  :  wait until we close default editor instance
	- set default diff tool name  :  $ git config --global diff.tool vscode
	- set how to lunch vscode  :  $ git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"  :  check this configuration in global configuration

Recommended : There are GUI tools out there but use terminal. (bash terminal , xterm , Konsole or ...)

Git structure
Working directory -> (git add) index/staging -> (git commit) HEAD -> (git push) remote repository like Github

HEAD is a reference to the current branch.

if you initialized new project , you need tell git where to push new project. steps :
1- make a repository on Github
2- $ git remote add origin https_url (or ssh_url)

Branches : copy of the code at a point in time that has it's own seperate history from the main branch which is called master

Common linux commands:
- $ ls  :  lists current drectory content
- $ pwd  :  present working directory
- $ cd <new-directory>  :  change directory to new directory
- $ cat <file-fullname>  :  see file's content
- $ touch <new-file-name>  :  create empty file
- $ rm <file-name> : remove file
- $ nano <file-name>  :  create the file and open nano editor if the file not exist , or just open nano editor if file exists

Common git commands:
- $ git config --global user.name "Your Name"
- $ git config --global user.email "your@email.com" 
- $ git --version  :  check if git is installed and check git version
- $ git init  :  initilalize new projects as a git repository. adds .git folder. don't touch .git folder
- $ git status  :  shows what branch you already are on and project status
- $ git status -s  :  short status
	- red charachter : staged
	- green charachter : unstaged
	- green charachter + red charachter : some changes are in staging area and some changes are not.
	- M : Modified , A : Added , D : Deleted , ?? : not exist in staging area (untracked file)
- $ git clone <remote-repo>	  :  clone exisiting project from exisiting repository. you can use either ssh or https
- $ git remote  :  list remote repositories
- $ git remote add origin https_url(ssh_url)  :  add existing repository to github
- $ git push  :  push all commited changes to remote repository 
- $ git pull  :  copies everything from the remote repository to your computer
- $ git branch new_branch  :  makes a new branch
- $ git checkout new_branch  :  switch to new_branch 
- $ git checkout -b another_new_branch  :  make a new branch and switch to it at the same time ( combinition of two above command )
- $ git push --set-upstream origin new_branch  :  push newly created branch to remote_repository
- $ git merge new_branch  :  you should do this command on the master branch. merge the branch with master
- $ git add new_file  :  stage new_file
- $ git add  :  stage all new or changed files
- $ git add *.html  :  stage (track) all html files
- $ git ls-files  :  shows files in staging area
- $ git restore <file-name>  :  rollback unstaged files from unstaged to unchanged (copies <file-name> from repo to working directory)( discard local changes )
- $ git resotre --staged <file-name>  :  rollback staged files from staged to unstaged (copies the last version of <file-name> from repo to index)
- $ git restore --source=HEAD~2 file.js (restoring an earlier version of a file , first next area wd -> sta ->lc -> specific commit)
- $ git clean -fd  :  removes all untracked files (undo local changes) (those who have ?? besides them)
- $ git commit -m "first commit"  :  commit staged files
- $ git commit -m "second commit" -m "first description"  :  commit staged files
- $ git commit  :  if you don't use -m option , it will open an editor with default comment in it
- $ git commit -a -m "message"  :  used to direct commit the unstage files. (Recommend : don't use this approach)
- $ git diff  :  show unstaged changes
	- minus sign (-) : changes in the old copy
	- plus sign (+) : changes in the new copy
	- /dev/null : means that we don't have old copy and file is new
- $ git diff --staged  :  show staged changes ( used to review before commit )
- $ git diff --cached  :  same as the above
- $ git diff HEAD~2 HEAD  :  shows the changes between two commits
- $ git diff HEAD~2 HEAD file.txt  :  changes to file.txt only
- $ git difftool  :  shows diffs using difftool. for this , you must set default difftool in configuration.
- $ git branch  :  list of all branches
- $ git branch master  :  switch to master branch
- $ git log  :  shows full history
- $ git log --oneline  :  shows summary history
- $ git log --reverse  :  lists the commits from the oldest to the newest
- $ git log --stat  :  shows the list of modified files
- $ git log --patch  :  shows the actual changes (patches)
- $ git show <hash-id>  :  show the given commit
- $ git show HEAD  :  shows the last commit
- $ git show HEAD~2  :  two steps before the last commit
- $ git show HEADL:<full-path-to-the-file>  :  shows the version of the file stored in the last commit
- $ git ls-tree HEAD~1  :  unlike show command , shows all files in previous commit.
- $ git checkout <commit-hash>  :  rollback to specific commit , you can find commit hash from "git log" command
- $ git config --help  :  full help
- $ git config -h  :  shortt summary of commands and options
- for delete a file , you should delete it from both working directory and staging area
	- assume we have file1 and file2 in staging area
	- $ rm file1
	- $ ls  :  file 2
	- $ git ls-files  :  file1 , file2
	- $ git add file1
	- $ git ls-files : file1
- instead of above steps , you can simply use :
	- $ git rm file1  :  remove files from working directory and staging area at the same time.
	- $ git rm --cached <file-name>  :  remove from staging area only
- when you rename(move) a file from working directory , git thinks you delete the file and add a new file to working directory , so you must first stage the previous file and then add stage new file. after that git realize that you renamed the file.
- instead of that approach you can simply use : $git mv previous_file new_file
- $ git rm -h  :  shows help for git rm command
- $ git mv file1 file2  :  renaming ore moving the file
- $ git config --global alias.lg "log --oneline"


.gitignore file : what shoud exclude from the repository
$ touch .gitignore
if you add file after staging it , it doesn't work. you should remove it from staging area not working directory : $ git rm -r --cached <file-or-folder-name>
- you can find .gitignore template on : github.com/github/gitignore

-Git Stash : The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy. Use git stash when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit. 



git remote get-url origin




